{"ast":null,"code":"const STOCKS_URL = \"https://fast-inlet-64606.herokuapp.com/\";\n\nconst STOCKS_UPDATE = stocksId => `${STOCKS_URL}/${stocksId}`;\n\nconst setStocks = stocks => ({\n  type: \"SET_STOCKS\",\n  payload: stocks\n});\n\nconst setCurrentStock = stockObj => ({\n  type: \"SET_CURRENT_STOCK\",\n  payload: stockObj\n});\n\nconst getStocksFromDB = () => dispatch => {\n  let config = {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${localStorage.token}`\n    }\n  };\n  fetch(STOCKS_URL, config).then(res => res.json()).then(stocksData => dispatch(setStocks(stocksData))).catch(error => console.log(error));\n};\n\nconst getCurrentStock = stockObj => dispatch => {\n  localStorage.setItem(\"stock\", JSON.stringify(stockObj));\n  let stock = JSON.parse(localStorage.stock);\n  let config = {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${localStorage.token}`\n    }\n  };\n  fetch(`${STOCKS_URL}/${stock.id}`, config).then(res => res.json()).then(stockData => {\n    dispatch(setCurrentStock(stockData));\n  }).catch(error => console.log(error));\n}; // TODO: DO STOCK SHARES UPDATE;\n\n\nconst patchStockToDB = (stockObj, stockQuanity) => dispatch => {\n  let remainingShares = stockObj.shares - stockQuanity;\n  let config = {\n    method: \"PATCH\",\n    headers: {\n      Authorization: `Bearer ${localStorage.token}`,\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      shares: remainingShares\n    })\n  };\n  fetch(STOCKS_UPDATE(stockObj.id), config).then(res => res.json()).then(stockData => {\n    dispatch(setCurrentStock(stockData));\n  }).catch(error => console.log(error));\n  getStocksFromDB();\n};\n\nexport default {\n  getStocksFromDB,\n  getCurrentStock,\n  patchStockToDB\n};","map":{"version":3,"sources":["/Users/hamidoudiallo/Desktop/portfolio_stocks/frontend/src/redux/actions/stocksActions.js"],"names":["STOCKS_URL","STOCKS_UPDATE","stocksId","setStocks","stocks","type","payload","setCurrentStock","stockObj","getStocksFromDB","dispatch","config","method","headers","Authorization","localStorage","token","fetch","then","res","json","stocksData","catch","error","console","log","getCurrentStock","setItem","JSON","stringify","stock","parse","id","stockData","patchStockToDB","stockQuanity","remainingShares","shares","Accept","body"],"mappings":"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","sourcesContent":["const STOCKS_URL = \"https://fast-inlet-64606.herokuapp.com/\";\nconst STOCKS_UPDATE = stocksId => `${STOCKS_URL}/${stocksId}`;\n\nconst setStocks = stocks => ({\n\ttype: \"SET_STOCKS\",\n\tpayload: stocks\n});\n\nconst setCurrentStock = stockObj => ({\n\ttype: \"SET_CURRENT_STOCK\",\n\tpayload: stockObj\n});\n\nconst getStocksFromDB = () => dispatch => {\n\tlet config = {\n\t\tmethod: \"GET\",\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${localStorage.token}`\n\t\t}\n\t};\n\tfetch(STOCKS_URL, config)\n\t\t.then(res => res.json())\n\t\t.then(stocksData => dispatch(setStocks(stocksData)))\n\t\t.catch(error => console.log(error));\n};\n\nconst getCurrentStock = stockObj => dispatch => {\n\tlocalStorage.setItem(\"stock\", JSON.stringify(stockObj));\n\tlet stock = JSON.parse(localStorage.stock);\n\tlet config = {\n\t\tmethod: \"GET\",\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${localStorage.token}`\n\t\t}\n\t};\n\tfetch(`${STOCKS_URL}/${stock.id}`, config)\n\t\t.then(res => res.json())\n\t\t.then(stockData => {\n\t\t\tdispatch(setCurrentStock(stockData));\n\t\t})\n\t\t.catch(error => console.log(error));\n};\n\n// TODO: DO STOCK SHARES UPDATE;\nconst patchStockToDB = (stockObj, stockQuanity) => dispatch => {\n\tlet remainingShares = stockObj.shares - stockQuanity;\n\tlet config = {\n\t\tmethod: \"PATCH\",\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${localStorage.token}`,\n\t\t\tAccept: \"application/json\",\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tshares: remainingShares\n\t\t})\n\t};\n\tfetch(STOCKS_UPDATE(stockObj.id), config)\n\t\t.then(res => res.json())\n\t\t.then(stockData => {\n\t\t\tdispatch(setCurrentStock(stockData));\n\t\t})\n\t\t.catch(error => console.log(error));\n\n\tgetStocksFromDB();\n};\n\nexport default {\n\tgetStocksFromDB,\n\tgetCurrentStock,\n\tpatchStockToDB\n};\n"]},"metadata":{},"sourceType":"module"}