{"ast":null,"code":"const BASE_URL = \"http://localhost:3001/transactions\";\n\nconst setTransactions = transactions => ({\n  type: \"GET_TRANSACTIONS\",\n  payload: transactions\n});\n\nconst getTransactionsFromDB = () => dispatch => {\n  let user = JSON.parse(localStorage.user);\n  let config = {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${localStorage.token}`\n    }\n  };\n  fetch(BASE_URL, config).then(res => res.json()).then(transactionData => {\n    let userTransactions = transactionData.filter(transaction => transaction.user.id === user);\n    dispatch(setTransactions(userTransactions));\n  }).catch(error => console.log(error));\n};\n\nconst postTransactionToDB = (stockPrice, stockQuantity, userId, stockId) => dispatch => {\n  let config = {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${localStorage.token}`,\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      price: stockPrice,\n      quantity: stockQuantity,\n      user_id: userId,\n      stock_id: stockId\n    })\n  };\n  fetch(BASE_URL, config).then(res => res.json()).then(postData => console.log(postData)).catch(error => console.log(error));\n};\n\nexport default {\n  getTransactionsFromDB,\n  postTransactionToDB\n};","map":{"version":3,"sources":["/Users/hamidoudiallo/Desktop/react_projects/portfolio_stocks/frontend/src/redux/actions/purchaseActions.js"],"names":["BASE_URL","setTransactions","transactions","type","payload","getTransactionsFromDB","dispatch","user","JSON","parse","localStorage","config","method","headers","Authorization","token","fetch","then","res","json","transactionData","userTransactions","filter","transaction","id","catch","error","console","log","postTransactionToDB","stockPrice","stockQuantity","userId","stockId","Accept","body","stringify","price","quantity","user_id","stock_id","postData"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,oCAAjB;;AAEA,MAAMC,eAAe,GAAIC,YAAD,KAAmB;AAC1CC,EAAAA,IAAI,EAAE,kBADoC;AAE1CC,EAAAA,OAAO,EAAEF;AAFiC,CAAnB,CAAxB;;AAKA,MAAMG,qBAAqB,GAAG,MAAOC,QAAD,IAAc;AACjD,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACH,IAAxB,CAAX;AACA,MAAII,MAAM,GAAG;AACZC,IAAAA,MAAM,EAAE,KADI;AAEZC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAG,UAASJ,YAAY,CAACK,KAAM;AADpC;AAFG,GAAb;AAOAC,EAAAA,KAAK,CAAChB,QAAD,EAAWW,MAAX,CAAL,CACEM,IADF,CACQC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADhB,EAEEF,IAFF,CAEQG,eAAD,IAAqB;AAC1B,QAAIC,gBAAgB,GAAGD,eAAe,CAACE,MAAhB,CACrBC,WAAD,IAAiBA,WAAW,CAAChB,IAAZ,CAAiBiB,EAAjB,KAAwBjB,IADnB,CAAvB;AAGAD,IAAAA,QAAQ,CAACL,eAAe,CAACoB,gBAAD,CAAhB,CAAR;AACA,GAPF,EAQEI,KARF,CAQSC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CARnB;AASA,CAlBD;;AAoBA,MAAMG,mBAAmB,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,MAA5B,EAAoCC,OAApC,KAC3B3B,QAD2E,IAEvE;AACJ,MAAIK,MAAM,GAAG;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZC,IAAAA,OAAO,EAAE;AACRC,MAAAA,aAAa,EAAG,UAASJ,YAAY,CAACK,KAAM,EADpC;AAERmB,MAAAA,MAAM,EAAE,kBAFA;AAGR,sBAAgB;AAHR,KAFG;AAOZC,IAAAA,IAAI,EAAE3B,IAAI,CAAC4B,SAAL,CAAe;AACpBC,MAAAA,KAAK,EAAEP,UADa;AAEpBQ,MAAAA,QAAQ,EAAEP,aAFU;AAGpBQ,MAAAA,OAAO,EAAEP,MAHW;AAIpBQ,MAAAA,QAAQ,EAAEP;AAJU,KAAf;AAPM,GAAb;AAcAjB,EAAAA,KAAK,CAAChB,QAAD,EAAWW,MAAX,CAAL,CACEM,IADF,CACQC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADhB,EAEEF,IAFF,CAEQwB,QAAD,IAAcd,OAAO,CAACC,GAAR,CAAYa,QAAZ,CAFrB,EAGEhB,KAHF,CAGSC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAHnB;AAIA,CArBD;;AAuBA,eAAe;AACdrB,EAAAA,qBADc;AAEdwB,EAAAA;AAFc,CAAf","sourcesContent":["const BASE_URL = \"http://localhost:3001/transactions\";\n\nconst setTransactions = (transactions) => ({\n\ttype: \"GET_TRANSACTIONS\",\n\tpayload: transactions,\n});\n\nconst getTransactionsFromDB = () => (dispatch) => {\n\tlet user = JSON.parse(localStorage.user);\n\tlet config = {\n\t\tmethod: \"GET\",\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${localStorage.token}`,\n\t\t},\n\t};\n\n\tfetch(BASE_URL, config)\n\t\t.then((res) => res.json())\n\t\t.then((transactionData) => {\n\t\t\tlet userTransactions = transactionData.filter(\n\t\t\t\t(transaction) => transaction.user.id === user\n\t\t\t);\n\t\t\tdispatch(setTransactions(userTransactions));\n\t\t})\n\t\t.catch((error) => console.log(error));\n};\n\nconst postTransactionToDB = (stockPrice, stockQuantity, userId, stockId) => (\n\tdispatch\n) => {\n\tlet config = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${localStorage.token}`,\n\t\t\tAccept: \"application/json\",\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tprice: stockPrice,\n\t\t\tquantity: stockQuantity,\n\t\t\tuser_id: userId,\n\t\t\tstock_id: stockId,\n\t\t}),\n\t};\n\tfetch(BASE_URL, config)\n\t\t.then((res) => res.json())\n\t\t.then((postData) => console.log(postData))\n\t\t.catch((error) => console.log(error));\n};\n\nexport default {\n\tgetTransactionsFromDB,\n\tpostTransactionToDB,\n};\n"]},"metadata":{},"sourceType":"module"}